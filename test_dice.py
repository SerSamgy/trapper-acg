import pytestimport diceexpected_factory_method_data = [    (4, dice.Tetrahedron),    (6, dice.Cube),    (8, dice.Octahedron),    (10, dice.Decahedron),    (12, dice.Dodecahedron),]def test_dice(dice_instance):    assert isinstance(dice_instance, dice.Dice)def test_4sided_dice_has_proper_faces(tetrahedron, tetrahedron_faces):    assert tetrahedron.faces == tetrahedron_facesdef test_dice_faces_arent_mutable(tetrahedron):    with pytest.raises(AttributeError):        tetrahedron.faces.append(5)def test_10sided_dice_has_proper_faces(decahedron, decahedron_faces):    assert decahedron.faces == decahedron_faces@pytest.mark.parametrize('num_of_faces,expected', expected_factory_method_data)def test_factory_method_retrieves_proper_dice(num_of_faces, expected):    retrieved_dice = dice.get_dice(num_of_faces)    assert isinstance(retrieved_dice, expected)@pytest.fixturedef dice_instance():    instance = dice.Dice()    return instance@pytest.fixturedef tetrahedron():    instance = dice.Tetrahedron()    return instance@pytest.fixturedef tetrahedron_faces():    faces = tuple(range(1, 5))    return faces@pytest.fixturedef decahedron():    instance = dice.Decahedron()    return instance@pytest.fixturedef decahedron_faces():    faces = tuple(range(0, 10))    return faces